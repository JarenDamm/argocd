argocd:
  enabled: true
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
  namespace: argocd
  values:
    imagePullPolicy: IfNotPresent
    repoServer:
      serviceAccount:
        automountServiceAccountToken: true
      volumeMounts:
      - name: custom-tools
        mountPath: /usr/local/bin/argocd-vault-plugin
        subPath: argocd-vault-plugin
      volumes:
      - name: custom-tools
        emptyDir: {}
      initContainers:
      - name: download-tools
        image: alpine:3.8
        command: [sh, -c]
        env:
        - name: AVP_VERSION
          value: "1.12.0"
        args:
        - >-
          wget -O argocd-vault-plugin
          https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v${AVP_VERSION}/argocd-vault-plugin_${AVP_VERSION}_linux_amd64 &&
          chmod +x argocd-vault-plugin &&
          mv argocd-vault-plugin /custom-tools/
        volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
    server:      
      config:
        configManagementPlugins: |-
          - name: argocd-vault-plugin
            generate:
              command: ["argocd-vault-plugin"]
              args: ["generate", "./"]
        repositories: |
          - type: helm
            name: stable
            url: https://charts.helm.sh/stable
          - type: helm
            name: argo-cd
            url: https://argoproj.github.io/argo-helm    
reflector:
  enabled: true
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
  namespace: reflector
  values:
    imagePullPolicy: IfNotPresent  
kubedashboard:
  enabled: false
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
  namespace: kubernetes-dashboard
  values:
    imagePullPolicy: IfNotPresent
    service:
      externalPort: 8080
    resources: 
      limits:
        cpu: 200m
linkerd:
  enabled: true
  rotateCerts: false
  targetRevision: "~2.11.4"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  trustAnchor:
    # the identityTrustAnchorsPEM and key should be generated by `step` that has been base64 encoded as a string see https://linkerd.io/2.11/tasks/automatically-rotating-control-plane-tls-credentials/
    # at the time of writing, the crt and key can be generated with the following command `step certificate create root.linkerd.cluster.local ca.crt ca.key --profile root-ca --no-password --insecure`
    # then base64 encode the resulting ca.crt and ca.key files, and use that as the crt and key values here. This is only required if you
    # have set rotateCerts to true
    key: |
  values:
    proxy:
      resources:
        cpu:
          request: 10m
    identityTrustAnchorsPEM: |
    installNamespace: false
  ignoreDifferences:
    - group: batch
      jsonPointers:
        - /spec/schedule
      kind: CronJob
      name: linkerd-heartbeat
    - group: ''
      jsonPointers:
        - /data/tls.crt
        - /data/tls.key
      kind: Secret
      name: linkerd-policy-validator-k8s-tls
    - group: ''
      jsonPointers:
        - /data/tls.crt
        - /data/tls.key
      kind: Secret
      name: linkerd-proxy-injector-k8s-tls
    - group: ''
      jsonPointers:
        - /data/tls.crt
        - /data/tls.key
      kind: Secret
      name: linkerd-sp-validator-k8s-tls
    - group: admissionregistration.k8s.io
      jqPathExpressions:
        - .webhooks[]?.clientConfig.caBundle
      kind: MutatingWebhookConfiguration
      name: linkerd-proxy-injector-webhook-config
    - group: admissionregistration.k8s.io
      jqPathExpressions:
        - .webhooks[]?.clientConfig.caBundle
      kind: ValidatingWebhookConfiguration
      name: linkerd-policy-validator-webhook-config
    - group: admissionregistration.k8s.io
      jqPathExpressions:
        - .webhooks[]?.clientConfig.caBundle
      kind: ValidatingWebhookConfiguration
      name: linkerd-sp-validator-webhook-config
    - group: apps
      jqPathExpressions:
        - .spec.template.metadata.annotations."checksum/config"
      kind: Deployment
      name: linkerd-destination
    - group: apps
      jqPathExpressions:
        - .spec.template.metadata.annotations."checksum/config"
      kind: Deployment
      name: linkerd-proxy-injector
linkerdViz:
  enabled: true
  targetRevision: "~2.11.4"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  ignoreDifferences:
    - jsonPointers:
        - /data/tls.crt
        - /data/tls.key
      kind: Secret
      name: tap-injector-k8s-tls
    - jsonPointers:
        - /data/tls.crt
        - /data/tls.key
      kind: Secret
      name: tap-k8s-tls
    - group: admissionregistration.k8s.io
      jqPathExpressions:
        - .webhooks[]?.clientConfig.caBundle
      kind: MutatingWebhookConfiguration
      name: linkerd-tap-injector-webhook-config
    - group: apps
      jqPathExpressions:
        - .spec.template.metadata.annotations."checksum/config"
      kind: Deployment
      name: tap
    - group: apps
      jqPathExpressions:
        - .spec.template.metadata.annotations."checksum/config"
      kind: Deployment
      name: tap-injector
    - group: apiregistration.k8s.io
      jsonPointers:
        - /spec/caBundle
      kind: APIService
      name: v1alpha1.tap.linkerd.io
linkerdJaeger:
  enabled: true
  targetRevision: "~2.11.1"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  ignoreDifferences:
    - jsonPointers:
        - /data/tls.crt
        - /data/tls.key
      kind: Secret
      name: jaeger-injector-k8s-tls
    - group: admissionregistration.k8s.io
      jqPathExpressions:
        - .webhooks[]?.clientConfig.caBundle
      kind: MutatingWebhookConfiguration
      name: linkerd-jaeger-injector-webhook-config
    - group: apps
      jqPathExpressions:
        - .spec.template.metadata.annotations."checksum/config"
      kind: Deployment
      name: jaeger-injector